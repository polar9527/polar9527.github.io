<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Polar9527&#39; Blog</title>
    <link>https://polar9527.github.io/post/</link>
    <description>Recent content in Posts on Polar9527&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 06 Jun 2019 11:27:15 +0800</lastBuildDate>
    
	<atom:link href="https://polar9527.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Floyd&#39;s Tortoise and Hare &amp; 环检测算法</title>
      <link>https://polar9527.github.io/post/floyd-tortoise-and-hare/</link>
      <pubDate>Thu, 06 Jun 2019 11:27:15 +0800</pubDate>
      
      <guid>https://polar9527.github.io/post/floyd-tortoise-and-hare/</guid>
      <description>算法推导 当hare的移动速度是tortoise的 2 倍， 设起始点到环的入口的距离是T，环的长度是C， 当tortoise第一次走到环的入口ent</description>
    </item>
    
    <item>
      <title>Golang中除法和取模运算与Python3的区别</title>
      <link>https://polar9527.github.io/post/difference-between-division-and-modular-operation-in-golang-and-python3/</link>
      <pubDate>Mon, 20 May 2019 00:34:14 +0800</pubDate>
      
      <guid>https://polar9527.github.io/post/difference-between-division-and-modular-operation-in-golang-and-python3/</guid>
      <description>个人主页：[https://polar9527.github.io] 除法的取整分为三类：向上取整、向下取整、向零取整。 向上取整：向+∞ 方向取</description>
    </item>
    
    <item>
      <title>Golang string到[]byte的转换</title>
      <link>https://polar9527.github.io/post/golang-type-transition-between-string-and-byte/</link>
      <pubDate>Sun, 19 May 2019 10:49:53 +0800</pubDate>
      
      <guid>https://polar9527.github.io/post/golang-type-transition-between-string-and-byte/</guid>
      <description>字符串和字节 slice 之间可以相互转换： s := &amp;#34;abc&amp;#34; b := []byte(s) s2 := string(b) 从概念上讲，一个[]byte(s)转换是分配了一个新的字节数组用于保存字符串数据的拷贝，然</description>
    </item>
    
    <item>
      <title>理解Golang多重赋值</title>
      <link>https://polar9527.github.io/post/golang-multiple-assignment-evaluation/</link>
      <pubDate>Thu, 16 May 2019 19:40:04 +0800</pubDate>
      
      <guid>https://polar9527.github.io/post/golang-multiple-assignment-evaluation/</guid>
      <description>个人主页：[https://polar9527.github.io] Golang 的多重赋值可以用于值交换操作 两个值可以方便的如下交换： a, b = b, a 四个值</description>
    </item>
    
    <item>
      <title>如何使用VSCode中的Code Runner插件执行golang代码</title>
      <link>https://polar9527.github.io/post/how-to-use-vscode-run-golang/</link>
      <pubDate>Wed, 15 May 2019 19:36:37 +0800</pubDate>
      
      <guid>https://polar9527.github.io/post/how-to-use-vscode-run-golang/</guid>
      <description>个人主页：[https://polar9527.github.io] 如何使用 VSCode 中的 Code Runner 插件执行 golang 代码 project 的文档结如下 mylab |&amp;mdash;- main.go |&amp;mdash;- test.go main.go package main func main() { test() }</description>
    </item>
    
    <item>
      <title>Performance Without the Event Loop</title>
      <link>https://polar9527.github.io/post/performance-without-the-event-loop/</link>
      <pubDate>Mon, 13 May 2019 18:34:58 +0800</pubDate>
      
      <guid>https://polar9527.github.io/post/performance-without-the-event-loop/</guid>
      <description>英文原文 译文 本文基于我今年早些时候在 OSCON 所做的一场演讲。为了简明扼要，并针对我在演讲后收到的一些反馈意见进行了编辑。 谈到 Go 的时候，一个常见的说</description>
    </item>
    
    <item>
      <title>A Record of Debugging Golang Runtime</title>
      <link>https://polar9527.github.io/post/a-record-of-debugging-golang-runtime/</link>
      <pubDate>Thu, 09 May 2019 18:35:42 +0800</pubDate>
      
      <guid>https://polar9527.github.io/post/a-record-of-debugging-golang-runtime/</guid>
      <description>记一次 Golang runtime 的调试 调试环境 go 版本和平台 go version go1.5.4 linux/amd64 delve 版本 Delve Debugger Version: 1.0.0 Build: $Id: c98a142125d0b17bb11ec0513bde346229b5f533 $ 问题描述 一个编译好的 golang 程序的真正的入口并不是我们的 main 包中的 main 函数，在我们的</description>
    </item>
    
    <item>
      <title>代码高亮测试</title>
      <link>https://polar9527.github.io/post/01-syntax-highlighting/</link>
      <pubDate>Wed, 01 May 2019 12:51:08 +0800</pubDate>
      
      <guid>https://polar9527.github.io/post/01-syntax-highlighting/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;helloWorld&lt;/span&gt;() {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>主题与markdown语法测试</title>
      <link>https://polar9527.github.io/post/00-even-theme-preview/</link>
      <pubDate>Sun, 01 Jan 2017 18:03:09 +0800</pubDate>
      
      <guid>https://polar9527.github.io/post/00-even-theme-preview/</guid>
      <description>&lt;p&gt;主题与markdown语法测试。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>